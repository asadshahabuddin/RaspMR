package com.rasp.utils.protobuf;

//package under which Autogenerated class is to be placed
option java_package          = "com.rasp.mr";
option java_outer_classname  = "STaskProtos";
option java_generic_services = true;


/*
 *  STask represents the task that is to be sent across the network
 *
 */
message STask {
    // represents the id of the task
    required string id           = 1;
    // represents the job id of the task
    required string jobId        = 2;
    // represents the input split id for the task (this will only be passed for the map task)
    optional int32  inputSplitId = 3;
    // represents the class name for the task (this will only be passed for the map and reduce task)
    optional string className    = 4;
    // represents the type of task
    required STaskType taskType  = 5;
    // represents the ip of machine to which the shuffle data is to be transferred (only used for the shuffle task)
    optional string ip    = 6;
    // represents the key for which the task is to be run (used for the shuffle and reduce task)
    optional string key    = 7;

    // represents the different types of task
    enum STaskType {
        MAPPER  = 1;
        REDUCER = 2;
        SHUFFLE = 3;
    }
}

// represesnts the job to be transferred across the network
message SJob{
    // represents the jobId of the job
    required string jobId = 1;
}

// represents the response of the Map task
message SMapResponse {
    // represents the task id of the map task
    required string id = 1;

    // represents a tuple for the key count map
    message SKeyCount {
        // represents the key which is generated by the map task
        required string key  = 1;
        // represents the frequency of the given key
        required int64 count = 2;
    }

    // represents the key count map
    repeated SKeyCount mapCount = 3;
}

// represents the response of the rpc call
message STransferResponse {
    // rperesents the response status
    // currently this field is not being used, however it can be used in the future
    optional string status = 1;
}

// reperesents the output of the shuffle task
message SShuffleResponse {
    optional string taskId = 1;
}

// represents the output fo the reduce task
message SReduceResponse {
    optional string taskId = 1;
}

// represents the data that needs to be trnasfered for the shuffle phase
message STransferKeyData{

    // represents the key for which the data is to be transferred
    required string key = 1;
    // represents the data which needs to be transferred for teh given key
    optional bytes data = 2;
    // represents the SDataHost
    optional SDataHost dataHost = 3;
    // represents the jobId for the network
    optional string jobId = 4;

    // represents the data node
    message SDataHost {
        required string ip  = 1;
        required int32 port = 2;
    }
}

// represents the task node
service TaskService {
    // sends the task to the task node
    rpc sendTask(STask) returns (STransferResponse);

    // initiates the data transfer for shuffle phase
    rpc initiateTransferDataForKey(STransferKeyData) returns (STransferResponse);

    // transfer data for the shuffle phase
    rpc transferDataForKey(STransferKeyData) returns (STransferResponse);

    // terminates data transfer for the shuffle phase
    rpc terminateTransferDataForKey(STransferKeyData) returns (STransferResponse);

    // cleans up the tasknode for the given job
    rpc cleanup(SJob) returns (STransferResponse);
}

// represents the job node
service JobService {
    // sends the map response to the Job Node
    rpc sendMapResponse(SMapResponse) returns (STransferResponse);

    // sends the shuffle response to the Job Node
    rpc shuffleDataTransferCompleted(SShuffleResponse) returns (STransferResponse);

    // sends the reduce response to the Job Node
    rpc reduceCompleted(SReduceResponse) returns (STransferResponse);
}