/**
 * Author : Rahul Madhavan, Sourabh Suman
 * File   : Job.java
 * Email  : rahulk@ccs.neu.edu
 * Created: Mar 23, 2015
 * Edited : Mar 24, 2015, 4/12/15
 */

package com.rasp.mr;

/* Import list */
import com.rasp.utils.autodiscovery.Service;

import java.util.List;
import java.util.Map;

/**
 *
 * Job represents a Map Reduce Job
 * It references  {@link Mapper} and  {@link Reducer} Class
 */
public interface Job
{
    /**
     * Sets the path for the input files of the job to <code>path</code>
     *
     * @param path
     */
    void setInputPath(String path);


    /**
     * returns the input path set for the job
     *
     * @return the input path of the job
     */
    String getInputPath();

    /**
     * Set the {@link Mapper} class which represents the mapper to be used for this Job
     *
     * @param mapperClass
     */
    void setMapper(Class<? extends Mapper> mapperClass);


    /**
     * Set the {@link Reducer} class which represents the reducer to be used for this Job
     *
     * @param reducerClass
     */
    void setReducer(Class<? extends Reducer> reducerClass);


    /**
     * checks if the respective phase(map, shuffle or reduce)  for the job is over.
     *
     * @return true if the respective phase is complete
     */
    boolean isMapComplete();
    boolean isShuffleComplete();
    boolean isReduceComplete();

    /**
     * marks the respective phase(map, shuffle or reduce) for the job as completed.
     */
    void mapComplete();
    void shuffleComplete();
    void reduceComplete();


    /**
     * sets the tasks generated by the {@link com.rasp.mr.JobTracker} for the map phase in the job
     *
     * @param mapTasks
     */
    void setMapTasks(List<MapperTask> mapTasks);

    /**
     * sets the tasks generated by the {@link com.rasp.mr.JobTracker} for the reduce phase in the job
     *
     * @param reduceTasks
     */
    void setReduceTasks(List<ReducerTask> reduceTasks);

    /**
     * sets the tasks generated by the {@link com.rasp.mr.JobTracker} for the shuffle phase in the job
     *
     * @param shuffleTasks
     */
    void setShuffleTasks(List<ShuffleTask> shuffleTasks);

    /**
     * @return the tasks generated for the respective phase for the job
     */
    List<MapperTask> getMapTasks();
    List<ReducerTask> getReduceTasks();
    List<ShuffleTask> getShuffleTasks();

    /**
     *
     * @return a map where the keys of the map are the keys generated by the job in the map phase and
     * the service represents the machine where the data for the key is stored. The {@link JobTracker}
     * uses this data to decide the machines on which the reduce tasks are to be run
     *
     */
    Map<String,Service> getReduceKeyServiceMap();
    void setReduceKeyServiceMap(Map<String,Service> keyServiceMap);

    /**
     * @return the class set for the map or the reduce phase which represents the users {@link Mapper}
     * {@Reducer}
     *
     */
    Class<? extends Mapper> getMapperClass();
    Class<? extends Reducer> getReducerClass();


    /**
     * cleans up the intermediate data generated when the job is executed
     * it is to be invoked when the jobs reduce phase is complete
     */
    public void cleanup();


    /**
     *
     * @return teh jobId in string representation for the job
     */
    String getJobId();

}